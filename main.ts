namespace SpriteKind {
    export const Bottle = SpriteKind.create()
    export const Treasure = SpriteKind.create()
    export const Compass = SpriteKind.create()
    export const Dot = SpriteKind.create()
}
namespace myTiles {
    //% blockIdentity=images._tile
    export const tile0 = img`
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
`
    //% blockIdentity=images._tile
    export const tile1 = img`
6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 
6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 
6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 
6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 
6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 
6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 
6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 
6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 
6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 
6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 
6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 
6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 
6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 
6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 
6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 
6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 
`
    //% blockIdentity=images._tile
    export const tile2 = img`
d d d d d d d d d d d d d d d d 
d d d d d d d d d d d d d d d d 
d d d d e d d d d d d d d e d d 
d d d d d d d d d d d d d d d d 
d d d d d d d d d d d d d d d d 
d d d d d d d d d e d d d d d d 
d d e d d d d d d d d d d d d d 
d d d d d d d d d d d d d d d d 
d d d d d d d d d d d d d e d d 
d d d d d d d d d d d d d d d d 
d d d e d d d d d d d d d d d d 
d d d d d d d d d d d d d d d d 
d d d d d d d d d d d d d d d d 
d d d d d d d d d d e d d d d d 
d d d d d d d d d d d d d d d d 
d d d d d d d d d d d d d d d d 
`
    //% blockIdentity=images._tile
    export const tile3 = img`
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
`
}
/**
 * |player.x - bottle.x| < 80
 * 
 * AND
 * 
 * |player.y - bottle.y| < 60
 */
/**
 * Pirate Things:
 * 
 * 1. Find treasure!
 * 
 * 2. Follow Maps
 * 
 * 3. Avoid Krakens
 * 
 * 4. Settings save array
 * 
 * 5. Naming your boat
 */
function clearSave () {
    blockSettings.clear()
    game.reset()
}
sprites.onOverlap(SpriteKind.Player, SpriteKind.Bottle, function (sprite, otherSprite) {
    foundBottle = true
    otherSprite.destroy()
    createTreasure()
    updateMap()
})
function createBottle () {
    if (!(foundBottle)) {
        messageInABottle = sprites.create(img`
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . e e . . . . . . . . 
. . . . . 1 1 1 1 . . . . . . . 
. . . . 1 1 9 9 1 1 . . . . . . 
. . . . 1 9 d d 9 1 . . . . . . 
. . . . 1 9 d d 9 1 . . . . . . 
. . . . 1 9 d d 9 1 . . . . . . 
. . . . 1 9 d d 9 1 . . . . . . 
. . . . 1 1 1 1 1 1 . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
`, SpriteKind.Bottle)
        tiles.placeOnRandomTile(messageInABottle, myTiles.tile1)
        while (Math.abs(thePlayer.x - messageInABottle.x) > 200 || Math.abs(thePlayer.y - messageInABottle.y) > 200) {
            tiles.placeOnRandomTile(messageInABottle, myTiles.tile1)
        }
    }
}
controller.A.onEvent(ControllerButtonEvent.Pressed, function () {
    mapInvisible = !(mapInvisible)
    map.setFlag(SpriteFlag.Invisible, mapInvisible)
})
function loadGame () {
    thePlayer.setPosition(blockSettings.readNumber("playerX"), blockSettings.readNumber("playerY"))
    foundBottle = blockSettings.readNumber("foundBottle") == 1
    if (foundBottle) {
        createTreasure()
        theTreasure.setPosition(blockSettings.readNumber("treasureX"), blockSettings.readNumber("treasureY"))
        updateMap()
    }
    boatName = blockSettings.readString("boatName")
    if (!(blockSettings.exists("enemyXPositions"))) {
        enemyXPositions = []
        enemyYPositions = []
        for (let index = 0; index <= 100; index++) {
            whirlpool = sprites.create(img`
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . e . . 
. . . . . . . . . . . . . . . . 
. . 1 . . 1 . 1 . . . 1 . . . . 
. . . . . 1 . . . 1 . . . . . . 
. . 1 . 8 8 8 1 8 8 1 8 . . . . 
. . . 8 . . . . . . . 8 . . . . 
. . . 1 . . 1 8 8 8 8 . . . . . 
. . . 8 . 8 8 1 8 . 8 8 . e . . 
. . . 8 . 8 8 8 8 . . 8 . . . . 
. . . 8 . e . . e . . 1 . . . . 
. e . 1 8 . . . . e . 8 . e . . 
. . d . 8 8 8 8 . . 8 8 . . . . 
. . . . . . . 8 8 8 . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
`, SpriteKind.Enemy)
            tiles.placeOnRandomTile(whirlpool, myTiles.tile1)
            enemyXPositions.push(whirlpool.x)
            enemyYPositions.push(whirlpool.y)
        }
        blockSettings.writeNumberArray("enemyXPositions", enemyXPositions)
        blockSettings.writeNumberArray("enemyYPositions", enemyYPositions)
    } else {
        enemyXPositions = blockSettings.readNumberArray("enemyXPositions")
        enemyYPositions = blockSettings.readNumberArray("enemyYPositions")
        for (let index2 = 0; index2 <= enemyXPositions.length - 1; index2++) {
            whirlpool = sprites.create(img`
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . e . . 
. . . . . . . . . . . . . . . . 
. . 1 . . 1 . 1 . . . 1 . . . . 
. . . . . 1 . . . 1 . . . . . . 
. . 1 . 8 8 8 1 8 8 1 8 . . . . 
. . . 8 . . . . . . . 8 . . . . 
. . . 1 . . 1 8 8 8 8 . . . . . 
. . . 8 . 8 8 1 8 . 8 8 . e . . 
. . . 8 . 8 8 8 8 . . 8 . . . . 
. . . 8 . e . . e . . 1 . . . . 
. e . 1 8 . . . . e . 8 . e . . 
. . d . 8 8 8 8 . . 8 8 . . . . 
. . . . . . . 8 8 8 . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
`, SpriteKind.Enemy)
            whirlpool.setPosition(enemyXPositions[index2], enemyYPositions[index2])
        }
    }
}
sprites.onOverlap(SpriteKind.Player, SpriteKind.Enemy, function (sprite, otherSprite) {
    blockSettings.clear()
    game.over(false)
})
function createTreasure () {
    theTreasure = sprites.create(img`
2 2 . . . . . . . . . . . . 2 2 
2 2 2 . . . . . . . . . . 2 2 2 
. 2 2 2 . . . . . . . . 2 2 2 . 
. . 2 2 2 . . . . . . 2 2 2 . . 
. . . 2 2 2 . . . . 2 2 2 . . . 
. . . . 2 2 2 . . 2 2 2 . . . . 
. . . . . 2 2 2 2 2 2 . . . . . 
. . . . . . 2 2 2 2 . . . . . . 
. . . . . . 2 2 2 2 . . . . . . 
. . . . . 2 2 2 2 2 2 . . . . . 
. . . . 2 2 2 . . 2 2 2 . . . . 
. . . 2 2 2 . . . . 2 2 2 . . . 
. . 2 2 2 . . . . . . 2 2 2 . . 
. 2 2 2 . . . . . . . . 2 2 2 . 
2 2 2 . . . . . . . . . . 2 2 2 
2 2 . . . . . . . . . . . . 2 2 
`, SpriteKind.Treasure)
    tiles.placeOnRandomTile(theTreasure, myTiles.tile2)
    theCompass.setImage(compassImages[0])
}
function saveGame () {
    blockSettings.writeNumber("playerX", thePlayer.x)
    blockSettings.writeNumber("playerY", thePlayer.y)
    if (foundBottle) {
        blockSettings.writeNumber("foundBottle", 1)
        blockSettings.writeNumber("treasureX", theTreasure.x)
        blockSettings.writeNumber("treasureY", theTreasure.y)
    } else {
        blockSettings.writeNumber("foundBottle", 0)
    }
    blockSettings.writeString("boatName", boatName)
}
sprites.onOverlap(SpriteKind.Player, SpriteKind.Treasure, function (sprite, otherSprite) {
    blockSettings.clear()
    game.over(true)
})
function updateMap () {
    minimap2 = minimap.minimap(MinimapScale.Sixteenth, 2, 12)
    minimap.includeSprite(minimap2, theTreasure, MinimapSpriteScale.Octuple)
    minimap.getImage(minimap2).replace(13, 11)
    minimap.getImage(minimap2).replace(6, 1)
    map.setImage(minimap.getImage(minimap2))
}
let dot: Sprite = null
let angleBetween = 0
let windY = 0
let windX = 0
let minimap2: minimap.Minimap = null
let whirlpool: Sprite = null
let enemyYPositions: number[] = []
let enemyXPositions: number[] = []
let theTreasure: Sprite = null
let messageInABottle: Sprite = null
let boatName = ""
let foundBottle = false
let mapInvisible = false
let map: Sprite = null
let theCompass: Sprite = null
let thePlayer: Sprite = null
let compassImages: Image[] = []
tiles.setTilemap(tiles.createTilemap(
            hex``,
            img`
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
`,
            [myTiles.tile0,myTiles.tile1,myTiles.tile2,myTiles.tile3],
            TileScale.Sixteen
        ))
compassImages = [img`
. . . . e e e e e e e . . . . . 
. . e e 1 1 1 1 1 1 1 e e . . . 
. e 1 1 1 1 1 f 1 1 1 1 1 e . . 
. e 1 8 1 1 1 f 1 1 1 8 1 e . . 
e 1 1 1 8 1 1 f 1 1 8 1 1 1 e . 
e 1 1 1 1 1 1 f 1 1 1 1 1 1 e . 
e 1 1 1 1 1 1 f 1 1 1 1 1 1 e . 
e 1 8 8 1 1 1 5 1 1 1 8 8 1 e . 
e 1 1 1 1 1 1 1 1 1 1 1 1 1 e . 
e 1 1 1 1 1 1 1 1 1 1 1 1 1 e . 
e 1 1 1 8 1 1 1 1 1 8 1 1 1 e . 
. e 1 8 1 1 1 8 1 1 1 8 1 e . . 
. e 1 1 1 1 1 8 1 1 1 1 1 e . . 
. . e e 1 1 1 1 1 1 1 e e . . . 
. . . . e e e e e e e . . . . . 
. . . . . . . . . . . . . . . . 
`, img`
. . . . e e e e e e e . . . . . 
. . e e 1 1 1 1 1 1 1 e e . . . 
. e 1 1 1 1 1 2 1 1 1 1 1 e . . 
. e 1 8 1 1 1 2 1 1 1 f 1 e . . 
e 1 1 1 8 1 1 1 1 1 f 1 1 1 e . 
e 1 1 1 1 1 1 1 1 f 1 1 1 1 e . 
e 1 1 1 1 1 1 1 f 1 1 1 1 1 e . 
e 1 8 8 1 1 1 5 1 1 1 8 8 1 e . 
e 1 1 1 1 1 1 1 1 1 1 1 1 1 e . 
e 1 1 1 1 1 1 1 1 1 1 1 1 1 e . 
e 1 1 1 8 1 1 1 1 1 8 1 1 1 e . 
. e 1 8 1 1 1 8 1 1 1 8 1 e . . 
. e 1 1 1 1 1 8 1 1 1 1 1 e . . 
. . e e 1 1 1 1 1 1 1 e e . . . 
. . . . e e e e e e e . . . . . 
. . . . . . . . . . . . . . . . 
`, img`
. . . . e e e e e e e . . . . . 
. . e e 1 1 1 1 1 1 1 e e . . . 
. e 1 1 1 1 1 2 1 1 1 1 1 e . . 
. e 1 8 1 1 1 2 1 1 1 8 1 e . . 
e 1 1 1 8 1 1 1 1 1 8 1 1 1 e . 
e 1 1 1 1 1 1 1 1 1 1 1 1 1 e . 
e 1 1 1 1 1 1 1 1 1 1 1 1 1 e . 
e 1 8 8 1 1 1 5 f f f f f 1 e . 
e 1 1 1 1 1 1 1 1 1 1 1 1 1 e . 
e 1 1 1 1 1 1 1 1 1 1 1 1 1 e . 
e 1 1 1 8 1 1 1 1 1 8 1 1 1 e . 
. e 1 8 1 1 1 8 1 1 1 8 1 e . . 
. e 1 1 1 1 1 8 1 1 1 1 1 e . . 
. . e e 1 1 1 1 1 1 1 e e . . . 
. . . . e e e e e e e . . . . . 
. . . . . . . . . . . . . . . . 
`, img`
. . . . e e e e e e e . . . . . 
. . e e 1 1 1 1 1 1 1 e e . . . 
. e 1 1 1 1 1 2 1 1 1 1 1 e . . 
. e 1 8 1 1 1 2 1 1 1 8 1 e . . 
e 1 1 1 8 1 1 1 1 1 8 1 1 1 e . 
e 1 1 1 1 1 1 1 1 1 1 1 1 1 e . 
e 1 1 1 1 1 1 1 1 1 1 1 1 1 e . 
e 1 8 8 1 1 1 5 1 1 1 8 8 1 e . 
e 1 1 1 1 1 1 1 f 1 1 1 1 1 e . 
e 1 1 1 1 1 1 1 1 f 1 1 1 1 e . 
e 1 1 1 8 1 1 1 1 1 f 1 1 1 e . 
. e 1 8 1 1 1 8 1 1 1 f 1 e . . 
. e 1 1 1 1 1 8 1 1 1 1 1 e . . 
. . e e 1 1 1 1 1 1 1 e e . . . 
. . . . e e e e e e e . . . . . 
. . . . . . . . . . . . . . . . 
`, img`
. . . . e e e e e e e . . . . . 
. . e e 1 1 1 1 1 1 1 e e . . . 
. e 1 1 1 1 1 2 1 1 1 1 1 e . . 
. e 1 8 1 1 1 2 1 1 1 8 1 e . . 
e 1 1 1 8 1 1 1 1 1 8 1 1 1 e . 
e 1 1 1 1 1 1 1 1 1 1 1 1 1 e . 
e 1 1 1 1 1 1 1 1 1 1 1 1 1 e . 
e 1 8 8 1 1 1 5 1 1 1 8 8 1 e . 
e 1 1 1 1 1 1 f 1 1 1 1 1 1 e . 
e 1 1 1 1 1 1 f 1 1 1 1 1 1 e . 
e 1 1 1 8 1 1 f 1 1 8 1 1 1 e . 
. e 1 8 1 1 1 f 1 1 1 8 1 e . . 
. e 1 1 1 1 1 f 1 1 1 1 1 e . . 
. . e e 1 1 1 1 1 1 1 e e . . . 
. . . . e e e e e e e . . . . . 
. . . . . . . . . . . . . . . . 
`, img`
. . . . e e e e e e e . . . . . 
. . e e 1 1 1 1 1 1 1 e e . . . 
. e 1 1 1 1 1 2 1 1 1 1 1 e . . 
. e 1 8 1 1 1 2 1 1 1 8 1 e . . 
e 1 1 1 8 1 1 1 1 1 8 1 1 1 e . 
e 1 1 1 1 1 1 1 1 1 1 1 1 1 e . 
e 1 1 1 1 1 1 1 1 1 1 1 1 1 e . 
e 1 8 8 1 1 1 5 1 1 1 8 8 1 e . 
e 1 1 1 1 1 f 1 1 1 1 1 1 1 e . 
e 1 1 1 1 f 1 1 1 1 1 1 1 1 e . 
e 1 1 1 f 1 1 1 1 1 8 1 1 1 e . 
. e 1 f 1 1 1 8 1 1 1 8 1 e . . 
. e 1 1 1 1 1 8 1 1 1 1 1 e . . 
. . e e 1 1 1 1 1 1 1 e e . . . 
. . . . e e e e e e e . . . . . 
. . . . . . . . . . . . . . . . 
`, img`
. . . . e e e e e e e . . . . . 
. . e e 1 1 1 1 1 1 1 e e . . . 
. e 1 1 1 1 1 2 1 1 1 1 1 e . . 
. e 1 8 1 1 1 2 1 1 1 8 1 e . . 
e 1 1 1 8 1 1 1 1 1 8 1 1 1 e . 
e 1 1 1 1 1 1 1 1 1 1 1 1 1 e . 
e 1 1 1 1 1 1 1 1 1 1 1 1 1 e . 
e 1 f f f f f 5 1 1 1 8 8 1 e . 
e 1 1 1 1 1 1 1 1 1 1 1 1 1 e . 
e 1 1 1 1 1 1 1 1 1 1 1 1 1 e . 
e 1 1 1 8 1 1 1 1 1 8 1 1 1 e . 
. e 1 8 1 1 1 8 1 1 1 8 1 e . . 
. e 1 1 1 1 1 8 1 1 1 1 1 e . . 
. . e e 1 1 1 1 1 1 1 e e . . . 
. . . . e e e e e e e . . . . . 
. . . . . . . . . . . . . . . . 
`, img`
. . . . e e e e e e e . . . . . 
. . e e 1 1 1 1 1 1 1 e e . . . 
. e 1 1 1 1 1 2 1 1 1 1 1 e . . 
. e 1 f 1 1 1 2 1 1 1 8 1 e . . 
e 1 1 1 f 1 1 1 1 1 8 1 1 1 e . 
e 1 1 1 1 f 1 1 1 1 1 1 1 1 e . 
e 1 1 1 1 1 f 1 1 1 1 1 1 1 e . 
e 1 8 8 1 1 1 5 1 1 1 8 8 1 e . 
e 1 1 1 1 1 1 1 1 1 1 1 1 1 e . 
e 1 1 1 1 1 1 1 1 1 1 1 1 1 e . 
e 1 1 1 8 1 1 1 1 1 8 1 1 1 e . 
. e 1 8 1 1 1 8 1 1 1 8 1 e . . 
. e 1 1 1 1 1 8 1 1 1 1 1 e . . 
. . e e 1 1 1 1 1 1 1 e e . . . 
. . . . e e e e e e e . . . . . 
. . . . . . . . . . . . . . . . 
`]
thePlayer = sprites.create(img`
. . . . . . e e e . . . . . . . 
. . . . 1 1 1 e 1 1 1 . . . . . 
. . . . 1 1 1 e f f 1 . . . . . 
. . . . 1 1 1 e f f 1 . . . . . 
. . . . 1 1 1 e 1 1 1 . . . . . 
. . . . 1 1 1 1 1 1 1 . . . . . 
. . . . 1 1 1 1 1 1 1 . . . . . 
. . . . . . . e . . . . . . . . 
. . . . . . . e . . . . . . . b 
b b . . . . . e . . . . . b b b 
e e e e e e e e e e e e e e e b 
b b b b b b b b b b b b b b b . 
. e e e e e e e e e e e e e . . 
. b b b b b b b b b b b b b . . 
. . e e e e e e e e e e e . . . 
. . . . 1 1 1 1 1 1 1 . . . . . 
`, SpriteKind.Player)
theCompass = sprites.create(img`
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
`, SpriteKind.Compass)
theCompass.setFlag(SpriteFlag.RelativeToCamera, true)
theCompass.setPosition(150, 110)
map = sprites.create(img`
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
`, SpriteKind.Compass)
map.setFlag(SpriteFlag.RelativeToCamera, true)
map.setPosition(10, 10)
map.z = 20
mapInvisible = false
scene.cameraFollowSprite(thePlayer)
foundBottle = false
loadGame()
createBottle()
if (!(blockSettings.exists("boatName"))) {
    boatName = game.askForString("Name your boat, matey!")
}
thePlayer.say("" + boatName + " sails again!", 2000)
/**
 * Angle between player and treasure:
 * 
 * atan2(
 * 
 * targetY - yourY,
 * 
 * targetX - yourX
 * 
 * )
 * 
 * returns the result in radians 0-2pi
 */
game.onUpdate(function () {
    if (thePlayer.tileKindAt(TileDirection.Center, myTiles.tile1)) {
        thePlayer.setImage(img`
. . . . . . e e e . . . . . . . 
. . . . 1 1 1 e 1 1 1 . . . . . 
. . . . 1 1 1 e f f 1 . . . . . 
. . . . 1 1 1 e f f 1 . . . . . 
. . . . 1 1 1 e 1 1 1 . . . . . 
. . . . 1 1 1 1 1 1 1 . . . . . 
. . . . 1 1 1 1 1 1 1 . . . . . 
. . . . . . . e . . . . . . . . 
. . . . . . . e . . . . . . . b 
b b . . . . . e . . . . . b b b 
e e e e e e e e e e e e e e e b 
b b b b b b b b b b b b b b b . 
. e e e e e e e e e e e e e . . 
. b b b b b b b b b b b b b . . 
. . e e e e e e e e e e e . . . 
. . . . 1 1 1 1 1 1 1 . . . . . 
`)
        thePlayer.ax = windX
        thePlayer.ay = windY
        controller.moveSprite(thePlayer, 50, 50)
    } else {
        thePlayer.setImage(img`
. . . . . . f f f f f . . . . . 
. . . . . f f 1 1 1 f f . . . . 
. . . . . f 1 f 1 f 1 f . . . . 
. . . . . f 1 1 1 1 1 f . . . . 
. . 5 5 . f f 1 f 1 f f . 5 5 . 
. . f 5 5 f f f f f f f 5 5 f . 
. . f f f f f f f f f f f f f . 
. . . . . b b 1 b 1 b b . . . . 
. . . . 2 b b b b b b b . . . . 
. . . . 7 . b b b b b . . . . . 
. . . . 2 2 2 2 2 2 2 2 2 . . . 
. . . 4 . 4 4 4 4 4 4 4 . 4 . . 
. . . 2 . 2 2 2 2 2 2 2 . 2 . . 
. . . 5 . 4 4 4 4 4 4 4 . b . . 
. . . . . 8 8 8 8 8 8 8 . . . . 
. . . . . . 8 . . . e . . . . . 
`)
        thePlayer.ax = 0
        thePlayer.ay = 0
        controller.moveSprite(thePlayer, 20, 20)
        if (Math.percentChance(1)) {
            if (Math.percentChance(10)) {
                thePlayer.say("landlubber!", 1000)
            }
        }
    }
    if (foundBottle) {
        angleBetween = Math.atan2(theTreasure.y - thePlayer.y, theTreasure.x - thePlayer.x)
        theCompass.setImage(compassImages[(Math.floor(Math.map(angleBetween, -3.14159, 3.14159, 0, 7)) + 7) % 8])
    }
})
game.onUpdateInterval(5000, function () {
    windX = Math.randomRange(-100, 100)
    windY = Math.randomRange(-100, 100)
})
game.onUpdateInterval(1000, function () {
    if (foundBottle) {
        dot = sprites.create(img`
2 2 2 2 
2 2 2 2 
2 2 2 2 
2 2 2 2 
`, SpriteKind.Dot)
        dot.setPosition(thePlayer.x, thePlayer.y)
        minimap.includeSprite(minimap2, dot, MinimapSpriteScale.Double)
        dot.setImage(img`
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 
`)
    }
})
game.onUpdateInterval(1000, function () {
    saveGame()
})
